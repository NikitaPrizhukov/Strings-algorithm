#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <math.h>
#include <map>
using namespace std;

//поиск всех слов из списка в строке, вывод с какого индекса эти слова начинаются 

struct MyBohr
{
	int next_vrtx[26];
	int pat_num;
	bool flag;
};

class Bohr {

	vector<MyBohr> bohr;
	//vector<string> pattern;

public:

	MyBohr makeBohr() {

		MyBohr v;

		memset(v.next_vrtx, 255, sizeof(v.next_vrtx));

		v.flag = false;

		return v;
	}

	void initBohr() {
		bohr.push_back(makeBohr());
	}

	void addString(string s) {

		int num = 0;

		for (int i = 0; i < s.length(); i++) {
			int ch = s[i] - 97;
			if (bohr[num].next_vrtx[ch] == -1) {
				bohr.push_back(makeBohr());
				bohr[num].next_vrtx[ch] = bohr.size() - 1;
			}
			num = bohr[num].next_vrtx[ch];
		}

		bohr[num].flag = true;
		//pattern.push_back(s);
		//bohr[num].pat_num = pattern.size() - 1;
	}

	bool findStr(string& s) {

		int num = 0;
		for (int i = 0; i < s.length(); i++) {
			int ch = s[i] - 97;
			if (bohr[num].next_vrtx[ch] == -1) {
				s.clear();
				return false;
			}
			num = bohr[num].next_vrtx[ch];
		}

		return true;
	}

	int findStrLast(string s) {

		int num = 0;
		for (int i = 0; i < s.length(); i++) {
			int ch = s[i] - 97;
			if (bohr[num].next_vrtx[ch] == -1) {
				return 0;
			}
			num = bohr[num].next_vrtx[ch];
		}

		if (bohr[num].flag == true) {
			return 2;
		}
		else {
			return 1;
		}
	}
};

int main() {

	string text;
	getline(cin, text);

	if (text == "") {
		return 0;
	}

	string count;
	getline(cin, count);

	string str;

	Bohr b;
	b.initBohr();
	size_t maxLen = 0;

	vector<string> keys;

	for (int i = 0; i < stoi(count); i++) {

		getline(cin, str);

		if (str == "") {
			continue;
		}

		b.addString(str);
		keys.push_back(str);

		if (maxLen < str.length()) {
			maxLen = str.length();
		}
	}

	str.clear();
	map<string, vector<int>> mapa;

	for (size_t i = 0; i < text.length(); i++) {
		for (size_t f = i; f < i + min(text.length() - i, maxLen); f++) {
			str.push_back(text[f]);
			int an = b.findStrLast(str);
			if (an == 2) {
				mapa[str].push_back(i + 1);
			}
			else if (an == 0) {
				break;
			}
		}
		str.clear();
	}

	for (int i = 0; i < keys.size(); i++) {
		cout << keys[i] << " ";
		for (int f = 0; f < mapa[keys[i]].size(); f++) {
			cout << mapa[keys[i]][f] << " ";
		}
		cout << endl;
	}

	return 0;
}
